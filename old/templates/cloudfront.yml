AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Project:
    Type: String
  Environment:
    Type: String

Resources:
  CloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Join ["-", [!Ref Project, !Ref Environment, cache-policy]]
        DefaultTTL: 0
        MaxTTL: 1
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName


  ApplicationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["-", [!Ref Project, !Ref Environment, application]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ApplicationBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ApplicationBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
            Resource: !Sub arn:aws:s3:::${ApplicationBucket}/*

  BasicAuthenticationIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName:
            !Join ["-", [!Ref Project, !Ref Environment, get-parameters]]
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: "*"

  BasicAuthenticationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          'use strict';

          const { SSMClient, GetParameterCommand } = require("@aws-sdk/client-ssm");
          const ssm = new SSMClient({ region: 'us-east-1' }); 

          exports.handler = async (event, context, callback) => {
              const request = event.Records[0].cf.request;
              const headers = request.headers;

              const authUser = await ssm.send(
                  new GetParameterCommand({
                      Name: '${Project}-${Environment}-auth-user',
                      WithDecryption: true,
                  })
              );
              const authPass = await ssm.send(
                  new GetParameterCommand({
                      Name: '${Project}-${Environment}-auth-pass',
                      WithDecryption: true,
                  })
              );

              const authString = 'Basic ' + Buffer.from(authUser.Parameter.Value + ':' + authPass.Parameter.Value).toString('base64');

              if (typeof headers.authorization == 'undefined' || headers.authorization[0].value != authString) {
                  const body = 'Unauthorized';
                  const response = {
                      status: '401',
                      statusDescription: 'Unauthorized',
                      body: body,
                      headers: {
                          'www-authenticate': [{ key: 'WWW-Authenticate', value: 'Basic' }]
                      },
                  };
                  callback(null, response);
              }

              callback(null, request);
          };
      FunctionName:
        !Join [
          "-",
          [!Ref Project, !Ref Environment, basic-authentication-function],
        ]
      Handler: index.handler
      Role: !GetAtt BasicAuthenticationIAMRole.Arn
      Runtime: nodejs18.x

  BasicAuthenticationLambdaVersionV1:
    Type: AWS::Lambda::Version
    Properties:
      Description: v1
      FunctionName: !Ref BasicAuthenticationLambdaFunction

  RedirectToIndexIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  RedirectToIndexLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          'use strict';

          exports.handler = (event, context, callback) => {
              const request = event.Records[0].cf.request;
              if (!request.uri.match(/\/$/)) {
                  const names = request.uri.split('/');
                  if (!names[names.length - 1].match(/.+\..+/)) {
                      request.uri = request.uri.replace(/$/, '/');
                  }
              }
              request.uri = request.uri.replace(/\/$/, '/index.html');

              return callback(null, request);
          };
      FunctionName:
        !Join [
          "-",
          [!Ref Project, !Ref Environment, redirect-to-index-function],
        ]
      Handler: index.handler
      Role: !GetAtt RedirectToIndexIAMRole.Arn
      Runtime: nodejs18.x

  RedirectToIndexLambdaVersionV1:
    Type: AWS::Lambda::Version
    Properties:
      Description: v1
      FunctionName: !Ref RedirectToIndexLambdaFunction

  ApplicationDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachePolicyId: !Ref CloudFrontCachePolicy
          Compress: true
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !Ref BasicAuthenticationLambdaVersionV1
            - EventType: origin-request
              LambdaFunctionARN: !Ref RedirectToIndexLambdaVersionV1
          SmoothStreaming: false
          TargetOriginId: !Ref Environment
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt ApplicationBucket.DomainName
            Id: !Ref Environment
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        PriceClass: PriceClass_200
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

